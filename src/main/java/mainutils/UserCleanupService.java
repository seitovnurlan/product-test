package mainutils;

import client.UserClient;
import domain.model.User;
import io.restassured.response.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API.
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–∑—É (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏).
 */
public class UserCleanupService {

    private static final Logger logger = LoggerFactory.getLogger(UserCleanupService.class);
    private final UserClient userClient = new UserClient();

    /**
     * –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.
     */
    public void cleanUpAllUsers() {
        logger.info("‚ôªÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");

        try {
            List<User> users = userClient.getAllUsers(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ä–∞–∑—É

            if (users == null || users.isEmpty()) {
                logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ");
                return;
            }

            logger.info("üîπ –ù–∞–π–¥–µ–Ω–æ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", users.size());

            for (User user : users) {
                if (user == null || user.getId() == null) {
                    logger.warn("‚õî –ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –±–µ–∑ ID");
                    continue;
                }

                Response deleteResponse = userClient.deleteUser(user.getId());

                if (deleteResponse.statusCode() == 200 || deleteResponse.statusCode() == 204) {
                    logger.info("‚úÖ –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID={}", user.getId());
                } else {
                    logger.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={}: {}", user.getId(), deleteResponse.statusLine());
                }
            }

            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

        } catch (Exception e) {
            logger.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {}", e.getMessage(), e);
        }
    }
}
