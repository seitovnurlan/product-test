package client;

import domain.model.Product;
import io.qameta.allure.Step;
import io.restassured.response.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

import static io.restassured.RestAssured.given;
import static io.restassured.http.ContentType.JSON;

/**
 * REST-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–Ω–æ—Å—Ç—å—é Product.
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—é –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤ –∫ API /api/products.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–∞—Ö —É—Ä–æ–≤–Ω—è QA1‚ÄìQA3.
 */
public class ProductClient {

    private static final Logger logger = LoggerFactory.getLogger(ProductClient.class);

    // –ë–∞–∑–æ–≤—ã–π URL –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ VM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    private static final String BASE_URI = System.getProperty("api.base.url", "http://localhost:31494/api/products");

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ API
     */
    @Step("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
    public Response createProduct(Product product) {
        String url = BASE_URI;
        logRequest("POST", url, product);

        Response response = given()
                .contentType(JSON)
                .body(product)
                .post(url)
                .thenReturn();

        logResponse(response);
        return response;
    }

    /**
     * –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
     */
    @Step("–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    public void createProductBatch(Product[] products) {
        logger.info("‚è≥ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤", products.length);
        for (Product product : products) {
            try {
                Response response = createProduct(product);
                logger.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: {}, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {}", product.getName(), response.getStatusCode());
            } catch (Exception e) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {}: {}", product.getName(), e.getMessage());
            }
        }
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (Response)")
    public Response getAllProductsResponse() {
        String url = BASE_URI;
        logRequest("GET", url, null);

        Response response = given()
                .accept(JSON)
                .get(url)
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (Response) ‚Äî page={page}, size={size}")
    public Response getAllProductsResponse(int page, int size) {
        String url = BASE_URI + "?page=" + page + "&size=" + size;
        logRequest("GET", url, null);

        Response response = given()
                .accept(JSON)
                .get(url)
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (List<Product>)")
    public List<Product> getAllProducts() {
        return getAllProductsResponse()
                .then()
                .statusCode(200)
                .extract()
                .jsonPath()
                .getList("content", Product.class);
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    public List<Long> getAllProductIds() {
        return getAllProducts()
                .stream()
                .map(Product::getId)
                .toList(); // –∏–ª–∏ .collect(Collectors.toList()) –¥–ª—è Java 8
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID: {id}")
    public Response getProductById(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("Product ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
        }
        String url = BASE_URI + "/" + id;
        logRequest("GET", url, null);

        Response response = given()
                .accept(JSON)
                .get(url)
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID: {id}")
    public Response deleteProduct(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("Product ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
        }
        String url = BASE_URI + "/" + id;
        logRequest("DELETE (by ID)", url, null);

        Response response = given()
                .delete(url)
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (bulk): {ids}")
    public Response deleteProducts(List<Long> ids) {
        String url = BASE_URI;
        logRequest("DELETE (bulk)", url, ids);

        Response response = given()
                .contentType(JSON)
                .body(ids)
                .when()
                .request("DELETE", url) // REST Assured —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ç–µ–ª–æ –¥–ª—è DELETE
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    public Response deleteAllProducts() {
        String url = BASE_URI;
        logRequest("DELETE (all)", url, null);

        Response response = given()
                .delete(url)
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID: {id}")
    public Response updateProduct(Long id, Product product) {
        // üí• –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (id == null) {
            throw new IllegalArgumentException("Product ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
        }
        if (product == null) {
            throw new IllegalArgumentException("–û–±—ä–µ–∫—Ç Product –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }
        String endpoint = String.format("%s/%d", BASE_URI, id); // –ß–∏—Ç–∞–µ–º–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ

        logRequest("PUT", endpoint, product);

        Response response = given()
                .contentType(JSON)
                .body(product)
                .when()
                .put(endpoint)
                .thenReturn();

        logResponse(response);
        return response;
    }


    // üîΩ –£—Ç–∏–ª–∏—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    private void logRequest(String method, String url, Object body) {
        logger.info("‚û°Ô∏è {} {}", method, url);
        if (body != null) {
            logger.info("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {}", body);
        }
    }

    private void logResponse(Response response) {
        logger.info("‚¨ÖÔ∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {}", response.getStatusCode());
        if (response.getBody() != null && !response.getBody().asString().isBlank()) {
            logger.info("üì≠ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {}", response.getBody().asPrettyString());
            if (response.getStatusCode() == 500) {
                logger.error("‚ÄºÔ∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 500 ‚Äî –ø—Ä–æ–≤–µ—Ä—å –±–∏–∑–Ω–µ—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ –±—ç–∫–µ. –¢–µ–ª–æ: {}", response.getBody());
            }

        }

    }
    public void deleteAllProductsIndividually() {
        List<Product> all = getAllProducts();
        for (Product product : all) {
            deleteProduct(product.getId());
        }
    }

}
