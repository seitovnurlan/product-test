package client;

import config.RestAssuredConfigurator;
import domain.model.Product;
import io.qameta.allure.Allure;
import io.qameta.allure.Step;
import io.restassured.response.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

import static io.restassured.RestAssured.baseURI;
import static io.restassured.RestAssured.given;
import static io.restassured.http.ContentType.JSON;

/**
 * REST-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–Ω–æ—Å—Ç—å—é Product.
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—é –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤ –∫ API /api/products.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ç–µ—Å—Ç–∞—Ö —É—Ä–æ–≤–Ω—è QA1‚ÄìQA3.
 */
public class ProductClient {

    public ProductClient() {
        RestAssuredConfigurator.configure("/api/products");
    }

    private static final Logger logger = LoggerFactory.getLogger(ProductClient.class);
    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ API
     */
    @Step("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
    public Response createProduct(Product product) {

        logRequest("POST", "</>", product);
        String url = baseURI;
        Response response = given()
                .contentType(JSON)
                .body(product)
                .post()
                .thenReturn();

        logResponse(response);
        return response;
    }

    /**
     * –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
     */
    @Step("–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    public void createProductBatch(Product[] products) {
        logger.info("‚è≥ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤", products.length);
        for (Product product : products) {
            try {
                Response response = createProduct(product);
                logger.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: {}, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {}", product.getName(), response.getStatusCode());
            } catch (Exception e) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {}: {}", product.getName(), e.getMessage());
            }
        }
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (Response)")
    public Response getAllProductsResponse() {
        String url = baseURI;
        logRequest("GET", "</>", null);

        Response response = given()
                .accept(JSON)
                .get()
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (Response) ‚Äî page={page}, size={size}")
    public Response getAllProductsResponse(int page, int size) {
        String path = "/" + "?page=" + page + "&size=" + size;
        logRequest("GET", path, null);

        Response response = given()
                .accept(JSON)
                .get(path)
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (List<Product>)")
    public List<Product> getAllProducts() {
        return getAllProductsResponse()
                .then()
//                .statusCode(200)
                .extract()
                .jsonPath()
                .getList("content", Product.class);
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    public List<Long> getAllProductIds() {
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ID");

        Response response = given()
                .get()
                .thenReturn();

        logResponse(response);

        if (response.statusCode() != 200) {
            throw new IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: " + response.statusCode());
        }
        return response.jsonPath().getList("id", Long.class);
    }
//        return getAllProducts()
//                .stream()
//                .map(Product::getId)
//                .toList(); // –∏–ª–∏ .collect(Collectors.toList()) –¥–ª—è Java 8


    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID: {id}")
    public Response getProductById(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("Product ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
        }
        logRequest("GET", "/{id}", null);

        Response response = given()
                .pathParam("id", id)
                .when()
                .accept(JSON)
                .get("/{id}")
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID: {id}")
    public Response deleteProduct(Long id) {
        if (id == null) {
            throw new IllegalArgumentException("Product ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
        }
//        String path = "/" + "/" + id;
        logRequest("DELETE (by ID)", "/{id}", null);

        Response response = given()
                .pathParam("id", id)
                .when()
                .delete("/{id}")
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (bulk): {ids}")
    public Response deleteProducts(List<Long> ids) {
        logRequest("DELETE (bulk)", "/", ids);

        Response response = given()
                .contentType(JSON)
                .body(ids)
                .when()
                .request("DELETE", "") // REST Assured —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Ç–µ–ª–æ –¥–ª—è DELETE
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    public Response deleteAllProducts() {
        logRequest("DELETE (all)", "/", null);

        Response response = given()
                .delete()
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID: {id}")
    public Response updateProduct(Long id, Product product) {
        // üí• –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (id == null) {
            throw new IllegalArgumentException("Product ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏");
        }
        if (product == null) {
            throw new IllegalArgumentException("–û–±—ä–µ–∫—Ç Product –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }
        String endpoint = "/" + id; // –ø—Ä–æ—Å—Ç–æ "/1", —Ç.–∫. basePath —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

        logRequest("PUT", endpoint, product);

        Response response = given()
                .contentType(JSON)
                .body(product)
                .when()
                .put("/{id}", id)
                .thenReturn();

        logResponse(response);
        return response;
    }


    // üîΩ –£—Ç–∏–ª–∏—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    private void logRequest(String method, String url, Object body) {
        logger.info("‚û°Ô∏è {} {}", method, url);
        if (body != null) {
            logger.info("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {}", body);
        }
    }

    private void logResponse(Response response) {
        int statusCode = response.getStatusCode();
        String responseBody = response.getBody() != null ? response.getBody().asPrettyString() : "";

        logger.info("‚¨ÖÔ∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {}", statusCode);

        if (!responseBody.isBlank()) {
            logger.info("üì≠ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {}", responseBody);
        }

//        if (statusCode == 500) {
//            // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥, –Ω–µ –∫–∞–∫ –æ—à–∏–±–∫—É
//            logger.warn(" –ò–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 500 ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –±–∏–∑–Ω–µ—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏. –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:\n{}", responseBody);
//
//            // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Allure, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ:
//            Allure.addAttachment("Known issue: Server returned 500", responseBody);
//
//            // –ú–æ–∂–Ω–æ –∑–¥–µ—Å—å –Ω–µ –∫–∏–¥–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ç–µ—Å—Ç –Ω–µ –ø–∞–¥–∞–ª, –∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –±–∞–≥
//        }
    }



    public void deleteAllProductsIndividually() {
        List<Product> all = getAllProducts();
        for (Product product : all) {
            deleteProduct(product.getId());
        }
    }
    public Product getProductByIdSafe(Long id) {
        Response response = getProductById(id);

        int status = response.getStatusCode();
        if (status != 200) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ID {}: —Å—Ç–∞—Ç—É—Å {}, —Ç–µ–ª–æ: {}",
                    id, status, response.getBody().asString());
            throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID " + id +
                    ". –ö–æ–¥: " + status);
        }

        return response.as(Product.class);
    }

}
