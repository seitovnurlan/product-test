package client;

import domain.model.User;
import io.qameta.allure.Step;
import io.restassured.response.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

import static io.restassured.RestAssured.given;
import static io.restassured.http.ContentType.JSON;

/**
 * REST-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö —É—Ä–æ–≤–Ω—è QA1 –∏ –≤ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
 */
public class UserClient {

    private static final Logger logger = LoggerFactory.getLogger(UserClient.class);
    private static final String BASE_URI = System.getProperty("api.base.url", "http://localhost:31494/api/users");

    @Step("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
    public Response createUser(User user) {
        String url = BASE_URI;
        logRequest("POST", url, user);

        Response response = given()
                .contentType(JSON)
                .body(user)
                .post(url)
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    public void createUserBatch(User[] users) {
        logger.info("‚è≥ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", users.length);
        for (User user : users) {
            try {
                Response response = createUser(user);
                logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {}, –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {}", user.getEmail(), response.getStatusCode());
            } catch (Exception e) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.getEmail(), e.getMessage());
            }
        }
    }

    @Step("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    public List<User> getAllUsers() {
        Response response = given()
                .accept(JSON)
                .get(BASE_URI)
                .thenReturn();

        logResponse(response);
        return response.jsonPath().getList(".", User.class);
    }

    @Step("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID: {id}")
    public Response deleteUser(Long id) {
        String url = BASE_URI + "/" + id;
        logRequest("DELETE", url, null);

        Response response = given()
                .delete(url)
                .thenReturn();

        logResponse(response);
        return response;
    }

    @Step("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    public Response deleteAllUsers() {
        logRequest("DELETE", BASE_URI, null);

        Response response = given()
                .delete(BASE_URI)
                .thenReturn();

        logResponse(response);
        return response;
    }

    private void logRequest(String method, String url, Object body) {
        logger.info("‚û°Ô∏è {} {}", method, url);
        if (body != null) {
            logger.info("üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {}", body);
        }
    }

    private void logResponse(Response response) {
        logger.info("‚¨ÖÔ∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {}", response.getStatusCode());
        logger.info("üì≠ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {}", response.getBody().asPrettyString());
    }
}
