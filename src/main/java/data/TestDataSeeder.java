package data;

import client.ProductClient;
import client.UserClient;
import com.github.javafaker.Faker;
import domain.model.Product;
import domain.model.User;
import io.qameta.allure.Step;
import io.restassured.response.Response;
import org.checkerframework.framework.qual.DefaultQualifier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.ArrayList;
import java.util.List;
/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏ –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ @BeforeClass –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏.
 */

public class TestDataSeeder {
    /**
     * –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö (—Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏—è) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     * –¥–ª—è —Ç–µ—Å—Ç–æ–≤ QA Level 1‚Äì3.
     */
    private static final Logger logger = LoggerFactory.getLogger(TestDataSeeder.class);
    private final Faker faker = new Faker();

    private final UserClient userClient = new UserClient();
    private final ProductClient productClient = new ProductClient();

    private final List<User> createdUsers = new ArrayList<>();
    private final List<Product> createdProducts = new ArrayList<>();

    private final List<Long> createdUserIds = new ArrayList<>();
    private final List<Long> createdProductIds = new ArrayList<>();

    /**
     * –°–∏–¥–∏—Ä—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏ –ø—Ä–æ–¥—É–∫—Ç—ã.
     * –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
     */
    public void seedAll() {
        seedAll(5, 10);
    }
    /**
     * –°–∏–¥–∏—Ä—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
     * @param userCount –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * @param productCount –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
     */
    public void seedAll(int userCount, int productCount) {
        logger.info("–°–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤", userCount, productCount);
        seedUsers(userCount);
        seedProducts(productCount);
    }
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-—é–∑–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ API –∏ —Å–±–æ—Ä –∏—Ö ID.
     */
    @Step("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ UserClient")
    public void seedUsers(int count) {
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", count);
        for (int i = 0; i < count; i++) {
            User user = new User(
                    faker.name().fullName(),
                    faker.internet().emailAddress(),
                    faker.internet().password(8, 12)
            );
            Response response = userClient.createUser(user);
//            if (response.statusCode() >= 200 || response.statusCode() < 300) {
            if (response.statusCode() == 200 || response.statusCode() == 201) {
                User created = response.as(User.class);
                createdUsers.add(created);
                logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}, —Å—Ç–∞—Ç—É—Å {} –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ 201", created.getName(), response.statusCode());
            } else {
//                logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å—Ç–∞—Ç—É—Å {}, —Ç–µ–ª–æ: {}", response.statusCode(), response.getBody().asString());
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, —Å—Ç–∞—Ç—É—Å: {}, —Ç–µ–ª–æ: {}",
                        user.getName(), response.statusCode(), response.getBody().asString());
            }
        }
        if (createdUsers.isEmpty()) {
            logger.warn("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.");
        }
    }
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–∫-–ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ API –∏ —Å–±–æ—Ä –∏—Ö ID.
     */
    @Step("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ ProductClient")
    public void seedProducts(int count) {
    logger.info("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å {}, –ø—Ä–æ–¥—É–∫—Ç–æ–≤", count);

        for (int i = 0; i < count; i++) {
            Product product = new Product(
                    faker.commerce().productName(),
                    faker.commerce().material(),
                    faker.number().randomDouble(2, 10, 1000)
            );
            Response response = productClient.createProduct(product);
//            if (response.statusCode() >= 200 || response.statusCode() < 300) {
            if (response.statusCode() == 201 || response.statusCode() == 200) {
                Product created = response.as(Product.class);
                createdProducts.add(created);
                createdProductIds.add(created.getId());
                logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {}, —Å—Ç–∞—Ç—É—Å {} –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ 201", created, response.statusCode());
            } else {
//                logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: —Å—Ç–∞—Ç—É—Å {}, —Ç–µ–ª–æ {}", response.statusCode(), response.getBody().asString());
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç: {}, —Å—Ç–∞—Ç—É—Å: {}, —Ç–µ–ª–æ: {}",
                        product.getName(), response.statusCode(), response.getBody().asString());
            }
        }
        if (createdProducts.isEmpty()) {
            logger.warn("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ.");
        }
    }

    public List<User> getCreatedUsers() {
        return new ArrayList<>(createdUsers);
    }

    public List<Product> getCreatedProducts() {
        return new ArrayList<>(createdProducts);
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º ID (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)

    public List<Long> getCreatedUserIds() {
        return createdUserIds;
    }

    public List<Long> getCreatedProductIds() {
        return createdProductIds;
    }

    //–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    public int getProductsCount() {
        return createdProductIds != null ? createdProductIds.size() : 0;
    }
/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
 */
    public Product generateProduct() {
        return new Product(
                faker.commerce().productName(),
                faker.commerce().material(),
                faker.number().randomDouble(2, 10, 1000)
        );
    }
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–º—è—Ç–∏ (–Ω–µ —É–¥–∞–ª—è–µ—Ç –∏–∑ –ë–î).
     */
    public void clearSeededData() {
        createdUsers.clear();
        createdProducts.clear();
        createdUserIds.clear();
        createdProductIds.clear();
        logger.info("üßπ –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏");
    }
}
