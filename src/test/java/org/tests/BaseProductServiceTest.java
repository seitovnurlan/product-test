package org.tests;

import config.RestAssuredConfigurator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.BeforeClass;
import client.ProductClient;
import data.TestDataSeeder;

import java.util.ArrayList;
import java.util.List;

public abstract class BaseProductServiceTest {

    protected static List<Long> productIds = new ArrayList<>();
    protected static TestDataSeeder seeder = new TestDataSeeder();
    protected static ProductClient productClient = new ProductClient();
    protected static Logger logger = LoggerFactory.getLogger(BaseProductServiceTest.class);

    @BeforeClass(alwaysRun = true)
    public void globalSetup() {

      if (productIds == null || productIds.isEmpty()) {
            logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏");

            List<Long> existingIds = productClient.getAllProductIds();

            if (existingIds == null || existingIds.isEmpty()) {
                logger.warn("‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–¥–µ—Ä...");
                seeder.seedAll();
                productIds = seeder.getCreatedProductIds();
                logger.info("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ–¥—É–∫—Ç—ã: {}", productIds);
            } else {
                productIds = existingIds;
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {}", productIds);
            }

            logger.info("üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤. ID: {}", productIds.size(), productIds);
        } else {
            logger.info("üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞–Ω–µ–µ: {}", productIds);
        }
    }
}
