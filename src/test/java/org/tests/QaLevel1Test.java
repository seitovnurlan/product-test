package org.tests;

import data.TestDataSeeder;
import io.qameta.allure.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import client.ProductClient;
import domain.model.Product;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import static org.assertj.core.api.Assertions.assertThat;
import testutils.TestUtils;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

@Epic("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è QA Level 1 ‚Äì –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
@Feature("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤, —Ü–µ–Ω –∏ –±–∞–∑–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
public class QaLevel1Test extends BaseTest {

    private static final Logger logger = LoggerFactory.getLogger(QaLevel1Test.class);

    private final ProductClient productClient = new ProductClient();
    private final TestDataSeeder seeder = new TestDataSeeder();
    private List<Long> productIds;

    @BeforeClass
    public void setup() {
//        seeder.clearSeededData();
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏ —É—Ä–æ–≤–Ω—è 1");
        seeder.seedAll();
        productIds = seeder.getCreatedProductIds();
        logger.info("–°–æ–∑–¥–∞–Ω–æ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤. ID: {}", productIds.size(), productIds);
    }

    @Test(description = "–ü—Ä–æ–¥—É–∫—Ç—ã —Å —á—ë—Ç–Ω—ã–º–∏ ID –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è")
    @Severity(SeverityLevel.CRITICAL)
    @Issue("BUG-QA1-01")
    public void testEvenIdIsUnavailable() {
        Long evenId = productIds.stream()
                .filter(id -> id % 2 == 0)
                .findFirst()
                .orElseThrow(() -> new RuntimeException("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á—ë—Ç–Ω—ã–π ID —Å—Ä–µ–¥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"));

        logger.info("(–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —á—ë—Ç–Ω—ã–º ID: {}", evenId);
        var response = productClient.getProductById(evenId);
        TestUtils.assertKnownIssueOrExpected(response, 403, "BUG-QA1-01");
    }

    @Test(description = "–ù–µ–ª—å–∑—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å ID –∫—Ä–∞—Ç–Ω—ã–º 3")
    @Severity(SeverityLevel.CRITICAL)
    @Issue("BUG-QA1-02")
    public void testUpdateForbiddenForIdDivisibleByThree() {
        Long id = productIds.stream().
                filter(i -> i % 3 == 0)
                .findFirst()
                .orElseThrow(() -> new RuntimeException("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID –∫—Ä–∞—Ç–Ω—ã–π 3"));

        Product update = new Product("Updated name","jur", 100);
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è ID {}, –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {}", id, update);

        var response = productClient.updateProduct(id, update);
        TestUtils.assertKnownIssueOrExpected(response, 403, "BUG-QA1-02");
    }

    @Test(description = "–ü—Ä–æ—Å—Ç—ã–µ ID —Ç—Ä–µ–±—É—é—Ç –¥–æ—Å—Ç—É–ø–∞: 2, 3, 5, 7")
    @Severity(SeverityLevel.CRITICAL)
    @Issue("BUG-QA1-03")
    public void testPrimeIdsAreRestricted() {
        int[] primeIds = {2, 3, 5, 7};

        for (int id : primeIds) {
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å –ø—Ä–æ—Å—Ç—ã–º ID: {}", id);
            var response = productClient.getProductById((long) id);
            TestUtils.assertKnownIssueOrExpected(response, 403, "BUG-QA1-03");
        }
    }

    @Test(description = "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ü–µ–Ω–æ–π –≤—ã—à–µ 1000 –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
    @Severity(SeverityLevel.CRITICAL)
    @Issue("BUG-QA1-04")
    public void testCreateProductWithHighPriceIsForbidden() {
        Product expensive = new Product("Expensive Product","fr", 1500);
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –∑–∞–≤—ã—à–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π: {}", expensive);

        var response = productClient.createProduct(expensive);
        TestUtils.assertKnownIssueOrExpected(response, 403, "BUG-QA1-04");
    }

    @Test(description = "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ü–µ–Ω–æ–π > 100 –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
    @Severity(SeverityLevel.CRITICAL)
    @Issue("BUG-QA1-05")
    public void testDeleteProductWithPriceOver100IsForbidden() {
        Product product = new Product("Pricey","e", 150);
        int id = productClient.createProduct(product).jsonPath().getInt("id");

        logger.info("üîç –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å ID {} –∏ —Ü–µ–Ω–æ–π {} (–æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–ø—Ä–µ—Ç)", id, product.getPrice());
        var response = productClient.deleteProduct((long) id);
        TestUtils.assertKnownIssueOrExpected(response, 403, "BUG-QA1-05");
    }

    @Test(description = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –±–æ–ª–µ–µ —á–µ–º –Ω–∞ $500 –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
    @Severity(SeverityLevel.CRITICAL)
    @Issue("BUG-QA1-06")
    public void testPriceChangeMoreThan500IsForbidden() {
        Product original = new Product("Base","r", 100);
        int id = productClient.createProduct(original).jsonPath().getInt("id");

        Product updated = new Product("Base","e", 650);
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞ –±–æ–ª–µ–µ 500: id={}, {} -> {}", id, original.getPrice(), updated.getPrice());

        var response = productClient.updateProduct((long) id, updated);
        TestUtils.assertKnownIssueOrExpected(response, 403, "BUG-QA1-06");
    }

    @Test(description = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –º–∏–Ω–∏–º—É–º 100 –º—Å")
    @Severity(SeverityLevel.NORMAL)
    @Issue("BUG-QA1-07")
    public void testMinimumDelayOf100ms() {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–∏–¥–µ—Ä –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assertThat("–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º", productIds, is(not(empty())));
        Long id = productIds.get(0);
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π: GET /products/{}", id);

        long start = System.currentTimeMillis();
        var response = productClient.getProductById(id);
        long duration = System.currentTimeMillis() - start;

        logger.info("–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {} –º—Å", duration);
        assertThat("–û–∂–∏–¥–∞–µ–º–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 100 –º—Å", duration, greaterThanOrEqualTo(100L));
        assertThat(response.getStatusCode(), is(200));
    }
}
