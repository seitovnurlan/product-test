package org.tests;

import data.TestDataSeeder;
import io.qameta.allure.*;
import io.restassured.response.Response;
import mainutils.ProductCleanupService;
import mainutils.UserCleanupService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import client.ProductClient;
import domain.model.Product;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import static org.assertj.core.api.Assertions.assertThat;
import testutil.TestUtils;

import java.util.ArrayList;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;

@Epic("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è QA Level 1 ‚Äì –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
@Feature("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤, —Ü–µ–Ω –∏ –±–∞–∑–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
public class QaLevel1Test extends BaseTest {

    private static final Logger logger = LoggerFactory.getLogger(QaLevel1Test.class);

    private final ProductClient productClient = new ProductClient();
    private final TestDataSeeder seeder = new TestDataSeeder();
    private List<Long> productIds;

    @BeforeClass
    public void setup() {
//        logger.info("üì¶ –û—á–∏—Å—Ç–∫–∞ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
//        UserCleanupService cleanerUser = new UserCleanupService();
//        ProductCleanupService cleanerProd = new ProductCleanupService();
//        cleanerUser.cleanUpAllUsers();    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ.
//        cleanerProd.cleanUpAllProducts(); // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –ø–æ–Ω–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã

//        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏ —É—Ä–æ–≤–Ω—è 1");
//        seeder.seedAll();
//        productIds = seeder.getCreatedProductIds();

            List<Long> existingIds = productClient.getAllProductIds(); // –¥–æ—Å—Ç–∞—ë–º ID –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞

            if (existingIds.isEmpty()) {
                System.out.println("–ü—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç. –°–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...");
                seeder.seedAll();
                productIds = seeder.getCreatedProductIds();
            } else {
                System.out.println("–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ...");
                productIds = existingIds;
            }
        logger.info("–°–æ–∑–¥–∞–Ω–æ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤. ID: {}", productIds.size(), productIds);
        logger.info("üì¶ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞");
//        this.productIds = new ArrayList<>();
    }

    @Test(description = "–ü—Ä–æ–¥—É–∫—Ç—ã —Å —á—ë—Ç–Ω—ã–º–∏ ID –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è")
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å —á—ë—Ç–Ω—ã–º ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω (403). "
            + "–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—ë—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-01.")
    @Issue("BUG-QA1-01")
    public void testEvenIdIsUnavailable() {
        // Arrange: –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —á—ë—Ç–Ω—ã–π ID —Å—Ä–µ–¥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        Long evenId = productIds.stream()
                .filter(id -> id % 2 == 0)
                .findFirst()
                .orElseThrow(() -> new RuntimeException("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á—ë—Ç–Ω—ã–π ID —Å—Ä–µ–¥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"));

        logger.info("üîç –¢–µ—Å—Ç BUG-QA1-01: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —á—ë—Ç–Ω—ã–º ID: {}", evenId);

        // Act: –¥–µ–ª–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å —á—ë—Ç–Ω—ã–º ID
        Response response = productClient.getProductById(evenId);

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –≤–µ—Ä–Ω—É–ª 403 –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—É—é 500 –æ—à–∏–±–∫—É
        TestUtils.assertKnownIssueOrExpected(response, 403, "BUG-QA1-01");
    }

    @Test(description = "–ù–µ–ª—å–∑—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å ID, –∫—Ä–∞—Ç–Ω—ã–º 3")
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID, –∫—Ä–∞—Ç–Ω—ã–º 3, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ (403). "
            + "–ï—Å–ª–∏ API –≤–µ—Ä–Ω—ë—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-02.")
    @Issue("BUG-QA1-02")
    public void testUpdateForbiddenForIdDivisibleByThree() {
        // Arrange: –∏—â–µ–º ID, –∫—Ä–∞—Ç–Ω—ã–π 3, —Å—Ä–µ–¥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        Long id = productIds.stream().
                filter(i -> i % 3 == 0)
                .findFirst()
                .orElseThrow(() -> new RuntimeException("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID, –∫—Ä–∞—Ç–Ω—ã–π 3, —Å—Ä–µ–¥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"));

        Product update = new Product("Updated lov3Prod","love3", 100);
        logger.info("üîç –¢–µ—Å—Ç BUG-QA1-02: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID {}. –û–±–Ω–æ–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ: {}", id, update);

        // Act: –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å ID, –∫—Ä–∞—Ç–Ω—ã–º 3
        Response response = productClient.updateProduct(id, update);

        // Assert: –æ–∂–∏–¥–∞–µ–º 403 –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ (500)
        TestUtils.assertKnownIssueOrExpected(response, 403, "BUG-QA1-02");
    }

    @Test(description = "–ü—Ä–æ–¥—É–∫—Ç—ã —Å –ø—Ä–æ—Å—Ç—ã–º–∏ ID (2, 3, 5, 7) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è")
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å –ø—Ä–æ—Å—Ç—ã–º–∏ ID (2, 3, 5, 7) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω (403). "
            + "–ï—Å–ª–∏ API –≤–µ—Ä–Ω—ë—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-03.")
    @Issue("BUG-QA1-03")
    public void testPrimeIdsAreRestricted() {
        // Arrange: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
        int[] primeIds = {2, 3, 5, 7};

        for (int id : primeIds) {
            long longId = id; // —è–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ long –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            logger.info("üîç –¢–µ—Å—Ç BUG-QA1-03: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å –ø—Ä–æ—Å—Ç—ã–º ID: {}", longId);
            // Act: –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
            Response response = productClient.getProductById(longId);
            // Assert: –æ–∂–∏–¥–∞–µ–º 403 –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ (500)
            TestUtils.assertKnownIssueOrExpected(response, 403, "BUG-QA1-03");
        }
    }

    @Test(description = "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ü–µ–Ω–æ–π –≤—ã—à–µ 1000 –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ü–µ–Ω–æ–π > 1000 API –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 403 Forbidden. "
            + "–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—ë—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-04.")
    @Issue("BUG-QA1-04")
    public void testCreateProductWithHighPriceIsForbidden() {
        // Arrange: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å–æ —Å—Ç–æ–∏–º–æ—Å—å—é 1500 —Å–æ–º
        Product expensiveProduct = new Product("Expensive Product_" + System.currentTimeMillis(),"auto generated", 1500);
        logger.info("üîç –¢–µ—Å—Ç BUG-QA1-04: –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –∑–∞–≤—ã—à–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π: {}", expensiveProduct);

        // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        Response response = productClient.createProduct(expensiveProduct);

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç ‚Äî 403, –ª–∏–±–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –±–∞–≥ —Å 500
        TestUtils.assertKnownIssueOrExpected(response, 403, "BUG-QA1-04");
    }

    @Test(description = "–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ü–µ–Ω–æ–π > 100 –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ü–µ–Ω–æ–π –≤—ã—à–µ 100 –∑–∞–ø—Ä–µ—â–µ–Ω–æ (403). " +
            "–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500, —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-05.")
    @Issue("BUG-QA1-05")
    public void testDeleteProductWithPriceOver100IsForbidden() {
        // Arrange:—Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç —Å —Ü–µ–Ω–æ–π 150 ‚Äî —ç—Ç–æ –±–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞ 100, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ
        Product product = new Product("ToDelete_"+System.currentTimeMillis(), "auto delete", 150);
        Response createResponse = productClient.createProduct(product);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω
        TestUtils.assertKnownIssueOrExpected(createResponse, 200, "BUG-QA1-05");
//        TestUtils.assertKnownIssueOrExpected(createResponse, 201, "BUG-QA1-05");
        if (createResponse.statusCode() == 201 || createResponse.statusCode() == 200) {
            Integer id = createResponse.jsonPath().get("id");
            Assert.assertNotNull(id, "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–µ 'id'. –û—Ç–≤–µ—Ç: " + createResponse.getBody().asString());

            logger.info("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç —Å ID {} –∏ —Ü–µ–Ω–æ–π {}", id, product.getPrice());

            Response deleteResponse = productClient.deleteProduct(id.longValue());

            TestUtils.assertKnownIssueOrExpected(deleteResponse, 403, "BUG-QA1-05");
        }
    }

    @Test(description = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –±–æ–ª–µ–µ —á–µ–º –Ω–∞ $500 –∑–∞–ø—Ä–µ—â–µ–Ω–æ")
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ $500 –∑–∞–ø—Ä–µ—â–µ–Ω–æ (403). " +
            "–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500, 200 –∏–ª–∏ 201 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ BUG-QA1-06.")
    @Issue("BUG-QA1-06")
    public void testPriceChangeMoreThan500IsForbidden() {
        // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        Long id = productIds.get(0);
//        Product original = productClient.getProductById(id);
        Product original = productClient.getAllProducts().get(0);

        if (original == null) {
            throw new RuntimeException("Product with ID " + id + " not found!");
        }

        double newPrice = original.getPrice() + 550;
        Product updated = new Product(original.getName(), original.getDescription(), newPrice);


//        Product original = productClient.getAllProducts().get(0);
//        Long id = productIds.get(0);
//        Product original = productClient.getProductById(id);
//        double newPrice = original.getPrice() + 550;
//        Product updated = new Product(original.getName(), original.getDescription(), newPrice);

        logger.info("üõ†Ô∏è –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç ID {}: {} ‚Üí {}", original.getId(), original.getPrice(), newPrice);
        Response response = productClient.updateProduct(original.getId(), updated);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å —É—á—ë—Ç–æ–º –±–∞–≥–æ–≤
        TestUtils.assertKnownIssueOrExpected(response, 403, "BUG-QA1-06");
    }


    @Test(description = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –º–∏–Ω–∏–º—É–º 100 –º—Å")
    @Severity(SeverityLevel.NORMAL)
    @Description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–∏–Ω–∏–º—É–º 100 –º—Å (–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞). " +
            "–ï—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω—å—à–µ ‚Äî —ç—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ. –ü—Ä–∏–º–µ–Ω–∏–º–æ –∫–æ –≤—Å–µ–º –º–µ—Ç–æ–¥–∞–º, –Ω–æ –∑–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è GET.")
    @Issue("BUG-QA1-07")
    public void testMinimumDelayOf100ms() {
        // Arrange: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        assertThat("‚ùå –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç ‚Äî —Å–∏–¥–µ—Ä –Ω–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª", productIds, is(not(empty())));
        Long id = productIds.get(0);
        logger.info("üß™ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ BUG-QA1-07: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ GET /products/{}", id);

        // Act: –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        long start = System.currentTimeMillis();
        var response = productClient.getProductById(id);
        long duration = System.currentTimeMillis() - start;
        logger.info("‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {} –º—Å", duration);

        if (response.statusCode() == 500) {
            logger.error("‚ÄºÔ∏è –û–∂–∏–¥–∞–ª–∞—Å—å –∑–∞–¥–µ—Ä–∂–∫–∞, –Ω–æ —Å–µ—Ä–≤–µ—Ä —É–ø–∞–ª —Å 500 ‚Äî –±–∞–≥ BUG-QA1-07");
            return; // –±–∞–≥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω
        }

        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ >= 100 –º—Å
        logger.info("‚úÖ –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 100 –º—Å, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏: {} –º—Å", duration);
        assertThat("‚è≥ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 100 –º—Å", duration, greaterThanOrEqualTo(100L));

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        logger.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞: —Å—Ç–∞—Ç—É—Å {}", response.getStatusCode());
        assertThat("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 200", response.getStatusCode(), is(200));
    }
}
