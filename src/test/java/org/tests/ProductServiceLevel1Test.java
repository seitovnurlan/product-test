package org.tests;

import config.RestAssuredConfigurator;
import io.qameta.allure.*;
import io.restassured.response.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import domain.model.Product;
import org.testng.Assert;
import org.testng.SkipException;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import static io.restassured.RestAssured.given;
import static org.assertj.core.api.Assertions.assertThat;
import testutil.TestUtils;

import static org.hamcrest.MatcherAssert.assertThat;

@Epic("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è QA Level 1 ‚Äì –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
@Feature("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤, —Ü–µ–Ω –∏ –±–∞–∑–æ–≤—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
public class ProductServiceLevel1Test extends BaseProductServiceTest {

    private static final Logger logger = LoggerFactory.getLogger(ProductServiceLevel1Test.class);

    @Test(description = "BUG-QA1-01: –ü—Ä–æ–¥—É–∫—Ç—ã —Å —á—ë—Ç–Ω—ã–º–∏ ID –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è", priority = 1)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å —á—ë—Ç–Ω—ã–º ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω (403). "
            + "–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—ë—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-01.")
    @Issue("BUG-QA1-01")
    public void testEvenIdIsUnavailable() {
        // Arrange: –Ω–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —á—ë—Ç–Ω—ã–π ID —Å—Ä–µ–¥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        Long evenId = productIds.stream()
                .filter(id -> id % 2 == 0)
                .findFirst()
                .orElseThrow(() -> new RuntimeException("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —á—ë—Ç–Ω—ã–π ID —Å—Ä–µ–¥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"));

        logger.info("üîç –¢–µ—Å—Ç BUG-QA1-01: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —á—ë—Ç–Ω—ã–º ID: {}", evenId);

        // Act: –≤—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å —á—ë—Ç–Ω—ã–º ID
        Response response = productClient.getProductById(evenId);

        // Assert: –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ API –≤–µ—Ä–Ω—É–ª 403 –∏–ª–∏ 500 (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥)
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA1-01");
    }

    @Test(description = "BUG-QA1-02: –ù–µ–ª—å–∑—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å ID, –∫—Ä–∞—Ç–Ω—ã–º 3", priority = 2)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID, –∫—Ä–∞—Ç–Ω—ã–º 3, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ (403). "
            + "–ï—Å–ª–∏ API –≤–µ—Ä–Ω—ë—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-02.")
    @Issue("BUG-QA1-02")
    public void testUpdateForbiddenForIdDivisibleByThree() {
        // Arrange: –∏—â–µ–º ID, –∫—Ä–∞—Ç–Ω—ã–π 3, —Å—Ä–µ–¥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        Long id = productIds.stream().
                filter(i -> i % 3 == 0)
                .findFirst()
                .orElseThrow(() -> new RuntimeException("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ID, –∫—Ä–∞—Ç–Ω—ã–π 3, —Å—Ä–µ–¥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"));

        Product update = new Product("Updated lov3Prod_"+ System.currentTimeMillis(),"love3"+ System.currentTimeMillis(), 100);
        logger.info("üîç –¢–µ—Å—Ç BUG-QA1-02: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID {}. –° –æ–±–Ω–æ–≤–ª—è–µ–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏", id);

        // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID, –∫—Ä–∞—Ç–Ω—ã–º 3
        Response response = productClient.updateProduct(id, update);

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è 403 –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ (500)
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA1-02");
    }

    @Test(description = "BUG-QA1-03: –ü—Ä–æ–¥—É–∫—Ç—ã —Å –ø—Ä–æ—Å—Ç—ã–º–∏ ID (2, 3, 5, 7) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è", priority = 3)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å –ø—Ä–æ—Å—Ç—ã–º–∏ ID (2, 3, 5, 7) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–µ—â—ë–Ω (403). "
            + "–ï—Å–ª–∏ API –≤–µ—Ä–Ω—ë—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-03.")
    @Issue("BUG-QA1-03")
    public void testPrimeIdsAreRestricted() {
        // Arrange: —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª
        int[] primeIds = {2, 3, 5, 7};

        for (int id : primeIds) {
            long longId = id; // —è–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º –∫ long –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –¥–ª—è API
            logger.info("üîç –¢–µ—Å—Ç BUG-QA1-03: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å –ø—Ä–æ—Å—Ç—ã–º ID: {}", longId);
            // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–¥—É–∫—Ç—É —Å –ø—Ä–æ—Å—Ç—ã–º ID
            Response response = productClient.getProductById(longId);
            // Assert: –æ–∂–∏–¥–∞–µ–º 403 –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ (500)
            TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA1-03");
        }
    }

    @Test(description = "BUG-QA1-04: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ü–µ–Ω–æ–π –≤—ã—à–µ $1000 –∑–∞–ø—Ä–µ—â–µ–Ω–æ", priority = 4)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ü–µ–Ω–æ–π > $1000 API –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 403 Forbidden. "
            + "–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—ë—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-04.")
    @Issue("BUG-QA1-04")
    public void testCreateProductWithHighPriceIsForbidden() {
        // Arrange: —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç —Å –∑–∞–≤—ã—à–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π ($1500)
        Product expensiveProduct = new Product("Expensive Product_" + System.currentTimeMillis(),"auto generated"+ System.currentTimeMillis(), 1500);
        logger.info("üîç –¢–µ—Å—Ç BUG-QA1-04: –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –∑–∞–≤—ã—à–µ–Ω–Ω–æ–π —Ü–µ–Ω–æ–π");

        // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        Response response = productClient.createProduct(expensiveProduct);

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç ‚Äî 403, –ª–∏–±–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ —Å 500
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA1-04");
    }

    @Test(description = "BUG-QA1-05: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ü–µ–Ω–æ–π > $100 –∑–∞–ø—Ä–µ—â–µ–Ω–æ", priority = 5)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ü–µ–Ω–æ–π –≤—ã—à–µ $100 –∑–∞–ø—Ä–µ—â–µ–Ω–æ (403). " +
            "–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500, —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-05.")
    @Issue("BUG-QA1-05")
    public void testDeleteProductWithPriceOver100IsForbidden() {
        // Arrange:—Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç —Å —Ü–µ–Ω–æ–π 150 ‚Äî –≤—ã—à–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        Product product = new Product("ToDelete_"+System.currentTimeMillis(), "auto delete"+System.currentTimeMillis(), 150);
        Response createResponse = productClient.createProduct(product);
        logger.info("üîç –¢–µ—Å—Ç BUG-QA1-05: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ü–µ–Ω–æ–π –≤—ã—à–µ $100 –∑–∞–ø—Ä–µ—â–µ–Ω–æ");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: 200 –∏–ª–∏ 201 ‚Äî –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        logger.info("üîç –¢–µ—Å—Ç BUG-QA1-05: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è: 200 –∏–ª–∏ 201 ‚Äî –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å—Ç–∞—Ç—É—Å—ã");
        TestUtils.assertOrSkipIfKnownBug(createResponse, 200, "BUG-QA1-05");
//        TestUtils.assertKnownIssueOrExpected(createResponse, 201, "BUG-QA1-05");

        if (createResponse.statusCode() == 201 || createResponse.statusCode() == 200) {
            Integer id = createResponse.jsonPath().get("id");
            Assert.assertNotNull(id, "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–æ–ª–µ 'id'. –û—Ç–≤–µ—Ç: " + createResponse.getBody().asString());

            logger.info("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: —Å–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç —Å ID {} –∏ —Ü–µ–Ω–æ–π {}", id, product.getPrice());
            // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE-–∑–∞–ø—Ä–æ—Å
            Response deleteResponse = productClient.deleteProduct(id.longValue());
            // Assert: –æ–∂–∏–¥–∞–µ–º 403 –∏–ª–∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –±–∞–≥ —Å 500
            TestUtils.assertOrSkipIfKnownBug(deleteResponse, 500, "BUG-QA1-05");
        }
    }

    @Test(description = "BUG-QA1-06: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –±–æ–ª–µ–µ —á–µ–º –Ω–∞ $500 –∑–∞–ø—Ä–µ—â–µ–Ω–æ", priority = 6)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ $500 –∑–∞–ø—Ä–µ—â–µ–Ω–æ (403). " +
            "–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500, 200 –∏–ª–∏ 201 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ BUG-QA1-06.")
    @Issue("BUG-QA1-06")
    public void testPriceChangeMoreThan500IsForbidden() {
        // Arrange: –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö
        Long id = productIds.get(0);
//        Response original = productClient.getProductById(id);
        Product original = productClient.getAllProducts().get(0);

        if (original == null) {
            throw new RuntimeException("‚ùå –ü—Ä–æ–¥—É–∫—Ç —Å ID " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }

        double newPrice = original.getPrice() + 550;
        Product updated = new Product(original.getName(), original.getDescription(), newPrice);

//        Product original = productClient.getAllProducts().get(0);
//        Long id = productIds.get(0);
//        Product original = productClient.getProductById(id);
//        double newPrice = original.getPrice() + 550;
//        Product updated = new Product(original.getName(), original.getDescription(), newPrice);

        logger.info("üõ†Ô∏è –¢–µ—Å—Ç BUG-QA1-06: –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ ID {} —Å {} –Ω–∞ {}", id, original.getPrice(), newPrice);
        // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–π —Ü–µ–Ω–æ–π
        Response response = productClient.updateProduct(original.getId(), updated);

        // Assert: –æ–∂–∏–¥–∞–µ–º 403 (–∑–∞–ø—Ä–µ—â–µ–Ω–æ), –∏–Ω–∞—á–µ ‚Äî –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ 500
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA1-06");
    }

    @Test(description = "BUG-QA1-07: –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET /products –º–∏–Ω–∏–º—É–º –∑–∞ 100 –º—Å", priority = 7)
    @Severity(SeverityLevel.NORMAL)
    @Description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å GET /products —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –Ω–µ –º–µ–Ω–µ–µ 100 –º—Å. " +
            "–ï—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-07 –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç.")
    @Issue("BUG-QA1-07")
    public void testMinimumDelayOf100ms() {
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ BUG-QA1-07: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ GET /api/products");
        // Act: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º Response
        Response response = given()
                .when()
                .get()
                .andReturn();

        long responseTime = response.time();
        int statusCode = response.statusCode();

        logger.info("‚è± –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {} –º—Å, —Å—Ç–∞—Ç—É—Å: {}", responseTime, statusCode);

        // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å ‚Äî –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ 201, –Ω–æ —Å–æ–≥–ª–∞—à.200 –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ 500
        TestUtils.assertOrSkipIfKnownBug(response, 200, "BUG-QA1-07");

        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω—å—à–µ 100 –º—Å ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –±–∞–≥–æ–º –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        if (responseTime < 100) {
            String msg = String.format("‚ÄºÔ∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ %d –º—Å –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö 100 –º—Å ‚Äî –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ –∑–∞–¥–µ—Ä–∂–∫–∏ BUG-QA1-07", responseTime);
            logger.warn(msg);
            Allure.addAttachment("Known issue: BUG-QA1-07", msg + "\nResponse body:\n" + response.getBody().asString());
            throw new SkipException("–ò–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA1-07: –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–Ω—å—à–µ 100 –º—Å");
        }

        // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî –∑–Ω–∞—á–∏—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ >= 100 –º—Å, –ø—Ä–æ–≤–µ—Ä—è–µ–º assert
        assertThat(responseTime)
                .withFailMessage("‚è≥ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 100 –º—Å, –Ω–æ –±—ã–ª–æ %d", responseTime)
                .isGreaterThanOrEqualTo(100L);

        logger.info("‚úÖ –¢–µ—Å—Ç BUG-QA1-07 —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω: –≤—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ >= 100 –º—Å");

    }

}
