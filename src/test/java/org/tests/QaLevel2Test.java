package org.tests;

import data.TestDataSeeder;
import io.qameta.allure.*;
import domain.model.Product;
import io.restassured.response.Response;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import mainutils.MockTimeProvider;
import client.ProductClient;
import testutil.TestUtils;

import java.time.LocalDateTime;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.testng.Assert.assertEquals;

@Epic("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è QA Level 2 ‚Äì –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
@Feature("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏, —É–¥–∞–ª–µ–Ω–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
public class QaLevel2Test extends BaseTest {

    private static final Logger logger = LoggerFactory.getLogger(QaLevel2Test.class);

    private final ProductClient productClient = new ProductClient();
    private final TestDataSeeder seeder = new TestDataSeeder();

    @Test(description = "–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã –Ω–æ—á—å—é (22:00‚Äì06:00)")
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –≤ –Ω–æ—á–Ω–æ–π –ø–µ—Ä–∏–æ–¥ —Å 22:00 –¥–æ 06:00 —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –∑–∞–ø—Ä–µ—â–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 403. " +
            "–ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA2-01.")
    @Issue("BUG-QA2-01")
    public void testUpdateForbiddenAtNight() {
        // Arrange: –∑–∞–¥–∞—ë–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî 01 —è–Ω–≤–∞—Ä—è 2023, 23:00 (–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è)
        MockTimeProvider.setFixedTime(LocalDateTime.of(2023, 1, 1, 23, 0));
        logger.info("üïê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 2023-01-01 23:00");

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –ø—É—Å—Ç–æ–π
        assertThat(productIds)
                .as("–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                .isNotEmpty();

        // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        Long productId = productIds.get(0);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        Product updateRequest = seeder.generateProduct();
        // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        Response response = productClient.updateProduct(productId, updateRequest);
//        assertEquals(response.statusCode(), 500,
//                "–û–∂–∏–¥–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –±–∞–≥ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 500. –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å 200 ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞");

        // Assert: –æ–∂–∏–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å 403, –ª–∏–±–æ 500 ‚Äî –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥, –Ω–µ –¥–æ–ª–∂–Ω–æ 200
        TestUtils.assertOrSkipIfKnownBug(response, 200, "BUG-QA2-01");
    }

    @Test(description = "–£–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –¥–æ 09:00")
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ —Ç–µ–∫—É—â–µ–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ 09:00, —Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ (403). " +
            "–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA2-02.")
    @Issue("BUG-QA2-02")
    public void testDeleteForbiddenOnMondayMorning() {
        // Arrange: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 08:30 (–¥–æ 09:00)
        LocalDateTime monday0830 = LocalDateTime.of(2025, 5, 19, 8, 30); // –≠—Ç–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        MockTimeProvider.setFixedTime(monday0830);
        logger.info("üïê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {}", monday0830);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –ø—É—Å—Ç
        assertThat(productIds)
                .as("–°–ø–∏—Å–æ–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                .isNotEmpty();

        // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        Long productId = productIds.get(1); // –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–ø–∏—Å–∫–µ
        logger.info("üóëÔ∏è –¢–µ—Å—Ç BUG-QA2-02: –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å ID {} –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –¥–æ 09:00", productId);

        // Act: –≤—ã–ø–æ–ª–Ω—è–µ–º DELETE-–∑–∞–ø—Ä–æ—Å
        Response response = productClient.deleteProduct(productId);

        // Assert: –æ–∂–∏–¥–∞–µ–º 403 Forbidden, –ª–∏–±–æ 500 ‚Äî –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA2-02");
    }


    @Test(description = "–û–∫–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: –∫–∞–∂–¥–∞—è 5-—è –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ —Å–µ–∫—É–Ω–¥–∞—Ö < 30 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 503")
    @Severity(SeverityLevel.NORMAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–∫–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (minute % 5 == 0 –∏ seconds < 30), " +
            "—Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 503. –ï—Å–ª–∏ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA2-03.")
    @Issue("BUG-QA2-03")
    public void testMaintenanceWindowReturns503() {
        // Arrange: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ 12:05:10 ‚Äî –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–∫–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        MockTimeProvider.setFixedTime(LocalDateTime.of(2023, 1, 1, 12, 5, 10));

        assertThat(productIds)
                .as("–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                .isNotEmpty();

        Long id = productIds.get(2);
        logger.info("üîß –¢–µ—Å—Ç BUG-QA2-03: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏ 12:05:10 –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ID={}", id);

        // Act: –≤—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å
        Response response = productClient.getProductById(id);

        // Assert: –æ–∂–∏–¥–∞–µ–º 503, –Ω–æ –µ—Å–ª–∏ –±–∞–≥ ‚Äî 500
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA2-03");
    }

    @Test(description = "–ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã (!@#...)")
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ " +
            "—Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400. –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA2-04.")
    @Issue("BUG-QA2-04")
    public void testNameWithSpecialCharactersIsRejected() {
        // Arrange: —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        Product product = seeder.generateProduct();
        product.setName("Invalid@Name!");

        logger.info("üî§ –¢–µ—Å—Ç BUG-QA2-04: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {}", product.getName());

        // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
        var response = productClient.createProduct(product);

        // Assert: –æ–∂–∏–¥–∞–µ–º 400, –Ω–æ –µ—Å–ª–∏ –±–∞–≥ ‚Äî 500
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA2-04");
    }

    @Test(description = "–ù–∞–∑–≤–∞–Ω–∏—è-–ø—Ä–æ–¥—É–∫—Ç–æ–≤, —è–≤–ª—è—é—â–∏–µ—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞–º–∏, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã")
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'racecar') " +
            "—Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 409 Conflict. –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA2-05.")
    @Issue("BUG-QA2-05")
    public void testPalindromeNameConflict() {
        // Arrange: —Å–æ–∑–¥–∞—ë–º –≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        Product product = seeder.generateProduct();
        product.setName("racecar"); // —ç—Ç–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º: —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã

        logger.info("üîÅ –¢–µ—Å—Ç BUG-QA2-05: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: {}", product.getName());

        // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        var response = productClient.createProduct(product);

        // Assert: –æ–∂–∏–¥–∞–µ–º 409 (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞–ª–∏–Ω–¥—Ä–æ–º), –∏–Ω–∞—á–µ 500 (–±–∞–≥)
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA2-05");
    }

    @Test(description = "–ù–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –±–æ–ª–µ–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞")
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 6 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, " +
            "—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 429 Too Many Requests. –ï—Å–ª–∏ –≤–µ—Ä–Ω—ë—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA2-06.")
    @Issue("BUG-QA2-06")
    public void testTooManyRequestsWithSameName() {
        String commonName = "Gadget"; // –ù–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 6 —Ä–∞–∑
        Product product = seeder.generateProduct();
        product.setName(commonName);

        logger.info("üîÅ –¢–µ—Å—Ç BUG-QA2-06: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å 6 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –æ–¥–Ω–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {}", commonName);

        // Arrange: —Å–æ–∑–¥–∞—ë–º 5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–µ–¥–µ–ª
        for (int i = 1; i <= 5; i++) {
            var response = productClient.createProduct(product);
            // –Ω–µ –¥–æ–ª–∂–Ω–æ 201
            assertEquals(response.getStatusCode(), 500, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ #" + i);
            logger.info("‚úÖ –ü—Ä–æ–¥—É–∫—Ç #{} —Å–æ–∑–¥–∞–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{}'", i, commonName);
        }

        // Act: 6-—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        var response = productClient.createProduct(product);

        // Assert: –æ–∂–∏–¥–∞–µ–º 429 Too Many Requests –∏–ª–∏ 500 –ø—Ä–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–º –±–∞–≥–µ
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA2-06");
    }

    @Test(description = "–¶–µ–Ω—ã –Ω–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥")
    @Severity(SeverityLevel.NORMAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 111.11). " +
            "–û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å 400 Bad Request. –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—ë—Ç 500 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ BUG-QA2-07.")
    @Issue("BUG-QA2-07")
    public void testPriceWithRepeatingDigitsIsRejected() {
        // Arrange: —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç —Å —Ü–µ–Ω–æ–π, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —Ü–∏—Ñ—Ä—ã
        Product product = seeder.generateProduct();
        product.setPrice(111.11);

        logger.info("üîç –¢–µ—Å—Ç BUG-QA2-07: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º–∏—Å—è —Ü–∏—Ñ—Ä–∞–º–∏: {}", product.getPrice());

        // Act: –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–Ω–æ–π
        var response = productClient.createProduct(product);

        // Assert: –æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É 400 –∏–ª–∏ 500 –ø—Ä–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ–º –±–∞–≥–µ
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA2-07");
    }

}
