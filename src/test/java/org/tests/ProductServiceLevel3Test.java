package org.tests;

import config.RestAssuredConfigurator;
import data.TestDataSeeder;
import io.qameta.allure.*;
import domain.model.Product;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.SkipException;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import io.restassured.response.Response;
import mainutils.MockTimeProvider;
import testutil.TestUtils;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.time.LocalDateTime;
import java.util.stream.Collectors;
import static org.mockito.Mockito.*;
import static org.testng.Assert.*;

@Epic("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è QA Level 3 ‚Äì –°–ª–æ–∂–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞")
@Feature("–ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏, ID, –∏–º–µ–Ω–∏ –∏ –º–∞—Å—Å–µ –¥–∞–Ω–Ω—ã—Ö")
public class ProductServiceLevel3Test extends BaseProductServiceTest {

    private static final Logger logger = LoggerFactory.getLogger(ProductServiceLevel3Test.class);

    @Test(description = "BUG-QA3-01: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ –≤—Å–µ–≥–æ < 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤", priority = 1)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –µ—Å–ª–∏ –∏—Ö < 10, —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 403 (—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª—É).")
    @Issue("BUG-QA3-01")
    public void testDeleteForbiddenIfLessThan10Products() {
        // Arrange: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-01: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –µ—Å–ª–∏ –∏—Ö < 10");

        int productCount = seeder.getProductsCount();

        if (productCount < 10) {
            logger.info("‚ÑπÔ∏è –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî –º–µ–Ω—å—à–µ 10. –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –≤—Å–µ.", productCount);

            // Arrange: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö ID –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            List<Long> idsToDelete = productClient.getAllProducts()
                    .stream()
                    .map(Product::getId)
                    .collect(Collectors.toList());

            logger.debug("üì¶ –°–ø–∏—Å–æ–∫ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {}", idsToDelete);

            // Act: –ü—ã—Ç–∞–µ–º—Å—è –º–∞—Å—Å–æ–≤–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            Response response = productClient.deleteProducts(idsToDelete);

            // Assert: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 403 Forbidden (—É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ)
            TestUtils.assertOrSkipIfKnownBug(response, 403, "BUG-QA3-01");
        } else {
            // Arrange: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî —Ç–µ—Å—Ç –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            logger.warn("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —É–∂–µ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (>= 10)", productCount);
        }
    }

    @Test(description = "BUG-QA3-02: –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ $500", priority = 2)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ $500 –∑–∞–ø—Ä–µ—â–µ–Ω–æ (403). " +
            "–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500, 200 –∏–ª–∏ 201 ‚Äî —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ BUG-QA3-02.")
    @Issue("BUG-QA3-02")
    public void testUpdateWithProhibitedPriceChange() {
        // Arrange: –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
        Long id = productIds.get(2); // –ë–µ—Ä—ë–º ID
        Product original = productClient.getProductByIdSafe(id); // ‚úÖ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤

        // Arrange: –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª–∞ (—É–¥–≤–æ–µ–Ω–∏–µ —Ü–µ–Ω—ã)
        double newPrice = original.getPrice() + 501.0;
        Product updated = new Product(original.getName(),original.getDescription(), newPrice);

        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-02: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID {}", id);

        // Act: –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {} ‚Üí {}", original.getPrice(), newPrice);
        Response response = productClient.updateProduct(id, updated); // –ü–µ—Ä–µ–¥–∞—ë–º id –æ—Ç–¥–µ–ª—å–Ω–æ

        //–æ–∂–∏–¥. 403, –Ω–æ —Å–µ—Ä–≤–µ—Ä –æ–±—ã—á–Ω–æ –∫–∏–¥–∞–µ—Ç 500, 200 –±–∞–≥
        // Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Ç–∞–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ (403), –∏–Ω–∞—á–µ ‚Äî –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA3-02");
    }

    @Test(description = "BUG-QA3-03: –î–æ—Å—Ç—É–ø –ø–æ ID < 1000 –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —É—Ç—Ä–æ–º)", priority = 3)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã —Å ID < 1000 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —É—Ç—Ä–æ–º (–æ–∂–∏–¥–∞–µ—Ç—Å—è 403). " +
            "–ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 200 –∏–ª–∏ 500 ‚Äî —ç—Ç–æ –±–∞–≥ BUG-QA3-03. –í —Ç–µ—Å—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è.")
    @Issue("BUG-QA3-03")
    public void testAccessRestrictedByIdAndTime_ProductsOnly() {
        // Arrange: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 18 –º–∞—è 2025 –≥–æ–¥–∞, 09:00
        LocalDateTime mockTime = LocalDateTime.of(2025, 5, 18, 9, 0);
        MockTimeProvider.setFixedTime(mockTime);
        TestUtils.assumeServerTime(mockTime);

        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-03: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º —Å ID < 1000 –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è");
        logger.info("üïí –ú–æ–∫-–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {} ({})",
                mockTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")),
                mockTime.getDayOfWeek());

        // Arrange: –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å ID < 1000
        List<Long> idsUnder1000 = productClient.getAllProducts().stream()
                .filter(p -> p.getId() < 1000)
                .map(Product::getId)
                .collect(Collectors.toList());

        logger.info("–ù–∞–π–¥–µ–Ω–æ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å ID < 1000", idsUnder1000.size());

        if (idsUnder1000.isEmpty()) {
            throw new SkipException("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å ID < 1000 ‚Äî —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∫ —á–µ–º—É –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–æ.");
        }

        // Act + Assert: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π ID
        for (Long id : idsUnder1000) {
            logger.info("‚û°Ô∏è –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ID {} –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —É—Ç—Ä–æ–º", id);
            Response response = productClient.getProductById(id);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ 200 –∏–ª–∏ 500 ‚Äî —ç—Ç–æ –±–∞–≥ BUG-QA3-03
            TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA3-03");
        }
    }



    @Test(description = "BUG-QA3-04: PUT –∑–∞–ø—Ä–µ—â—ë–Ω –≤–æ –≤—Ä–µ–º—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (12:00‚Äì13:00)", priority = 4)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç PUT-–∑–∞–ø—Ä–æ—Å—ã –≤ –ø–µ—Ä–∏–æ–¥ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (12:00‚Äì13:00). " +
            "–ï—Å–ª–∏ –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 –≤–º–µ—Å—Ç–æ 503 ‚Äî —ç—Ç–æ –±–∞–≥ BUG-QA3-04.")
    @Issue("BUG-QA3-04")
    public void testPutDuringMaintenance() {
        // Arrange: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–∫-–≤—Ä–µ–º—è: 12:05:20 (–≤–Ω—É—Ç—Ä–∏ –æ–∫–Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è)
        LocalDateTime maintenanceTime = LocalDateTime.of(2025, 5, 26, 12, 5, 20);
        MockTimeProvider.setFixedTime(maintenanceTime);

        Product product = seeder.generateProduct();
        Long id = productIds.get(1);

        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-04: PUT-–∑–∞–ø—Ä–æ—Å –≤ –ø–µ—Ä–∏–æ–¥ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è");
        logger.info("üïí –ú–æ–∫-–≤—Ä–µ–º—è: {}", maintenanceTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));

        // Act: –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
        Response response = productClient.updateProduct(id, product);

        logger.info("üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å = {}, —Ç–µ–ª–æ = {}", response.statusCode(), response.body().asPrettyString());

        // Assert: –í —ç—Ç–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–µ–º 503. –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª 200 ‚Äî —ç—Ç–æ –±–∞–≥
        TestUtils.assertOrSkipIfKnownBug(response, 503, "BUG-QA3-04");
    }

    @Test(description = "BUG-QA3-05: PUT –∑–∞–ø—Ä–µ—â—ë–Ω –ø–æ —Å—Ä–µ–¥–∞–º", priority = 5)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ —Å—Ä–µ–¥–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (PUT) –∑–∞–ø—Ä–µ—â–µ–Ω–æ. " +
            "–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 ‚Äî —ç—Ç–æ –±–∞–≥ BUG-QA3-05.")
    @Issue("BUG-QA3-05")
    public void testPutForbiddenOnWednesday() {
        // Arrange: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è ‚Äî —Å—Ä–µ–¥–∞, 4 —è–Ω–≤–∞—Ä—è 2023 –≥–æ–¥–∞
        LocalDateTime wednesday = LocalDateTime.of(2023, 1, 4, 14, 0);// —Å—Ä–µ–¥–∞
        MockTimeProvider.setFixedTime(wednesday);

//        LocalDateTime monday = LocalDateTime.of(2025, 5, 26, 14, 0); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
//        MockTimeProvider.setFixedTime(monday);

        Product product = seeder.generateProduct();
        Long id = productIds.get(1);

        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-05: PUT-–∑–∞–ø—Ä–æ—Å –≤ –¥–µ–Ω—å, –∫–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ (—Å—Ä–µ–¥–∞)");
        logger.info("üóìÔ∏è –ú–æ–∫-–¥–∞—Ç–∞: {}, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {}",
                wednesday.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm")),
                wednesday.getDayOfWeek());

        logger.info("PUT-–∑–∞–ø—Ä–æ—Å –≤ —Å—Ä–µ–¥—É, –∫–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ");
        // Act: –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PUT-–∑–∞–ø—Ä–æ—Å
        Response response = productClient.updateProduct(id, product);


        logger.info("üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å = {}, —Ç–µ–ª–æ = {}",
                response.statusCode(),
                response.body().asPrettyString());

        // Assert: –û–∂–∏–¥–∞–µ–º 403, –µ—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º 200 –∏–ª–∏ 500 ‚Äî —ç—Ç–æ –±–∞–≥
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA3-05");

//        logger.info("üü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è PUT –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ({}", monday.getDayOfWeek());
//        Response response = productClient.updateProduct(id, product);
//        assertEquals(response.statusCode(), 200, "PUT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à—ë–Ω –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫");
    }

    @Test(description = "BUG-QA3-06: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã–º–∏ ID –∑–∞–ø—Ä–µ—â–µ–Ω–æ", priority = 6)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API –∑–∞–ø—Ä–µ—â–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã–º–∏ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, 121, 131). –û–∂–∏–¥–∞–µ—Ç—Å—è 403 Forbidden, –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 500 ‚Äî —ç—Ç–æ –±–∞–≥.")
    @Issue("BUG-QA3-06")
    public void testDeleteProductsWithPalindromeIds() {
        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-06: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã–º–∏ ID –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 403 Forbidden");

        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º productIds –∏–∑ BaseProductServiceTest
        logger.info("üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {}", productIds.size());
        logger.debug("üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ID: {}", productIds);

        List<Long> palindromeIds = productIds.stream()
                .filter(TestUtils::isPalindrome)
                .limit(3)
                .toList();

        logger.info("üî¢ –ù–∞–π–¥–µ–Ω—ã –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã–µ ID: {}", palindromeIds);

        if (palindromeIds.isEmpty()) {
            throw new SkipException("‚ùå –ù–µ—Ç –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã—Ö ID —Å—Ä–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî —Ç–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è");
        }

        for (Long palindromeId : palindromeIds) {
            // Act
            Response response = productClient.deleteProduct(palindromeId);
            logger.info("üß® –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º ID = {}, —Å—Ç–∞—Ç—É—Å = {}", palindromeId, response.statusCode());

            // Assert
            TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA3-06");
        }
    }

    @Test(description = "BUG-QA3-07: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã–º–∏ ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ", priority = 7)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã–º–∏ ID. –û–∂–∏–¥–∞–µ—Ç—Å—è 403 Forbidden, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 500 ‚Äî —ç—Ç–æ –±–∞–≥.")
    @Issue("BUG-QA3-07")
    public void testBulkDeletePalindromesForbidden() {
        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-07: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã–º–∏ ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ");

        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ productIds –∏–∑ BaseProductServiceTest
        logger.info("üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {}", productIds.size());
        logger.debug("üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ ID: {}", productIds);

        // –ò—â–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–∞–ª–∏–Ω–¥—Ä–æ–º–∞
        List<Long> palindromeIds = productIds.stream()
                .filter(TestUtils::isPalindrome)
                .limit(3)
                .toList();

        logger.info("üîé –ù–∞–π–¥–µ–Ω—ã –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã–µ ID –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {}", palindromeIds);

        if (palindromeIds.isEmpty()) {
            throw new SkipException("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω–æ–≥–æ ID ‚Äî —Ç–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω");
        }

        // Act
        Response response = productClient.deleteProducts(palindromeIds);
        logger.info("üß® –ü–æ–ø—ã—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ —É–¥–∞–ª–∏—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º—ã {}, —Å—Ç–∞—Ç—É—Å = {}", palindromeIds, response.statusCode());

        // Assert
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA3-07");
    }




    @Test(description = "BUG-QA3-08: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö (–Ω–µ–ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã—Ö) ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ", priority = 8)
    @Severity(SeverityLevel.NORMAL)
    @Description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ API —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –æ–±—ã—á–Ω—ã–º–∏ (–Ω–µ–ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã–º–∏) ID. –û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å 204.")
    @Issue("BUG-QA3-08")
    public void testBulkDeleteNonPalindromesAllowed() {
        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-08: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö (–Ω–µ–ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã—Ö) ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º");

        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ID
        List<Long> allProductIds = seeder.getCreatedProductIds();

        List<Long> nonPalindromes = allProductIds.stream()
                .filter(id -> !TestUtils.isPalindrome(id))
                .limit(3)
                .collect(Collectors.toList());

        logger.info("üßπ –ü—ã—Ç–∞–µ–º—Å—è –º–∞—Å—Å–æ–≤–æ —É–¥–∞–ª–∏—Ç—å –æ–±—ã—á–Ω—ã–µ ID: {}", nonPalindromes);
        assertFalse(nonPalindromes.isEmpty(), "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±—ã—á–Ω–æ–≥–æ (–Ω–µ–ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω–æ–≥–æ) ID ‚Äî —Ç–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω");

        // Act
        Response response = productClient.deleteProducts(nonPalindromes);

        // Assert
        TestUtils.assertOrSkipIfKnownBug(response, 204, "BUG-QA3-08");
    }

    @Test(description = "BUG-QA3-09: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ < 10", priority = 9)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –µ—Å–ª–∏ –≤ –±–∞–∑–µ –º–µ–Ω–µ–µ 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å ID < 1000, —Ç–æ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 403.")
    @Issue("BUG-QA3-09")
    public void testBulkDeleteFailsWhenTooFewProducts() {
        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-09: –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ < 10");

        // Arrange: –æ—á–∏—â–∞–µ–º –±–∞–∑—É –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
//        logger.info("üßº –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞");
//        Response deleteAllResponse = productClient.deleteAllProducts();
//        assertEquals(200, deleteAllResponse.getStatusCode(), "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤");

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –±–∞–∑—ã
        List<Long> allProductIds = productClient.getAllProductIds();

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ ID < 1000
        List<Long> filteredIds = allProductIds.stream()
                .filter(id -> id < 1000)
                .collect(Collectors.toList());

        logger.info("üßÆ –í –±–∞–∑–µ –Ω–∞–π–¥–µ–Ω–æ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å ID < 1000", filteredIds.size());

        // –ï—Å–ª–∏ –≤ –±–∞–∑–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ < 10, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–Ω–æ 9 (—Ç–µ—Å—Ç–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ)
        if (filteredIds.size() >= 10) {
            // –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–µ–π—Å, —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã —Å—Ç–∞–ª–æ <10
            logger.info("‚ö†Ô∏è –í –±–∞–∑–µ –±–æ–ª–µ–µ 10 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å ID < 1000, –æ—á–∏—â–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞");
            Response clearAgain = productClient.deleteAllProducts();
            assertEquals(200, clearAgain.getStatusCode(), "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É");

            logger.info("üì¶ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 9 –ø—Ä–æ–¥—É–∫—Ç–æ–≤");
            seeder.seedProducts(9);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ ID –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            filteredIds = productClient.getAllProductIds().stream()
                    .filter(id -> id < 1000)
                    .collect(Collectors.toList());
            logger.info("üßÆ –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å ID < 1000", filteredIds.size());
            assertEquals(9, filteredIds.size(), "‚ùå –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 9 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å ID < 1000");
        }

        // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ < 10
        logger.info("üö´ –ü—Ä–æ–±—É–µ–º –º–∞—Å—Å–æ–≤–æ —É–¥–∞–ª–∏—Ç—å {} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–º–µ–Ω—å—à–µ 10)", filteredIds.size());
        Response response = productClient.deleteProducts(filteredIds);

        // Assert: –æ–∂–∏–¥–∞–µ–º 403 –∏–ª–∏, –µ—Å–ª–∏ –±–∞–≥, 405
        TestUtils.assertOrSkipIfKnownBug(response, 403, "BUG-QA3-09");
    }


    @Test(description = "BUG-QA3-10: –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã", priority = 10)
    @Severity(SeverityLevel.CRITICAL)
    @Description("–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞, —è–≤–ª—è—é—â–µ–µ—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º –¥–∞–∂–µ —Å —É—á—ë—Ç–æ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é. " +
            "–ü—Ä–∏–º–µ—Ä: 'ra@car' ‚Äî –ø–∞–ª–∏–Ω–¥—Ä–æ–º 'racar'. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞ 400, –Ω–æ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 (–±–∞–≥).")
    @Issue("BUG-QA3-10")
    public void testNameCannotBePalindromeWithSpecialSymbols() {
        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-10: –ò–º—è-–ø–∞–ª–∏–Ω–¥—Ä–æ–º —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–æ–ª–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è");

      // Arrange: —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç —Å –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—ã–º –∏–º–µ–Ω–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª
        Product product = new Product("ra@car", "fer", 99.99);
        logger.info("–°–æ–∑–¥–∞—ë–º –ø—Ä–æ–¥—É–∫—Ç —Å –∏–º–µ–Ω–µ–º: '{}'", product.getName());

        // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
        Response response = productClient.createProduct(product);

        // Assert: –æ–∂–∏–¥–∞–µ–º 400, –Ω–æ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 ‚Äî –∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA3-10");
    }

    @Test(description = "BUG-QA3-11: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", priority = 11)
    @Severity(SeverityLevel.CRITICAL)
    @Description("""
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ –≤—Ä–µ–º—è –æ–∫–Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.
–î–æ–ø—É—Å—Ç–∏–º, —Å 12:00 –¥–æ 12:30 (–≤—Ä–µ–º—è –∑–∞–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ MockTimeProvider).
–°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 503, –Ω–æ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 ‚Äî —ç—Ç–æ –±–∞–≥.
""")
    @Issue("BUG-QA3-11")
    public void testCreateDuringMaintenanceWindow() {
        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-11: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–∫–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ");

        // Arrange: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ 12:10 (–≤–Ω—É—Ç—Ä–∏ —Ç–µ—Ö. –æ–∫–Ω–∞)
        LocalDateTime maintenanceTime = LocalDateTime.of(2025, 5, 19, 12, 10, 10);
        MockTimeProvider.setFixedTime(maintenanceTime);
        logger.info("üïí –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {}", maintenanceTime);

        // Act: –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
        Product product = seeder.generateProduct();
        logger.info("üì¶ –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤–æ –≤—Ä–µ–º—è —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {}", product.getName());

        Response response = productClient.createProduct(product);

        // Assert: –æ–∂–∏–¥–∞–µ–º 503 Service Unavailable, –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ–º 200
        TestUtils.assertOrSkipIfKnownBug(response, 200, "BUG-QA3-11");
    }

    @Test(description = "BUG-QA3-12: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ —Ü–µ–Ω–æ–π –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø–æ –∏–º–µ–Ω–∏", priority = 12)
    @Severity(SeverityLevel.CRITICAL)
    @Description("""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, 
–∞ —Ü–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞), API –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º—É –ø–æ–ª—é. 
–°–µ–π—á–∞—Å —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤—Å—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 ‚Äî —ç—Ç–æ –±–∞–≥.
""")
    @Issue("BUG-QA3-12")
    public void testUpdateWithMultipleValidationErrorsReturnsFirst() {
        logger.info("üîç –¢–µ—Å—Ç BUG-QA3-12: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–∞–º–∏ –≤ –∏–º–µ–Ω–∏ –∏ —Ü–µ–Ω–µ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø–æ –∏–º–µ–Ω–∏");

        // Arrange: –≤—ã–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç –∏ –≥–æ—Ç–æ–≤–∏–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        Long id = productIds.get(0);
        Product invalidProduct = new Product("Gadget@@","gur", 111.11);

        logger.info("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å ID={} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {}", id, invalidProduct);

        // Act: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT-–∑–∞–ø—Ä–æ—Å
        Response response = productClient.updateProduct(id, invalidProduct);

        // Assert: –æ–∂–∏–¥–∞–µ–º 400 Bad Request, –Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç 200 ‚Äî —ç—Ç–æ –±–∞–≥
        TestUtils.assertOrSkipIfKnownBug(response, 500, "BUG-QA3-12");

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:
        // TestUtils.assertErrorMessageContains(response, "Invalid name");
    }
}
