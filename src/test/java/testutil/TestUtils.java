package testutil;

import io.qameta.allure.Allure;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import org.assertj.core.api.Assumptions;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.Assert;
import org.testng.SkipException;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;

import static io.restassured.RestAssured.given;
import static org.assertj.core.api.Assertions.*;
import static org.testng.Assert.assertEquals;

public class TestUtils {
    private static final Logger logger = LoggerFactory.getLogger(TestUtils.class);

    public static void assertOrSkipIfKnownBug(Response response, int expectedCode, String issueId) {
        int actual = response.statusCode();
        String body = response.getBody().asString();

        if (actual == expectedCode) {
            logger.info("‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: {}", actual);
            Assert.assertEquals(actual, expectedCode);
        } else if (actual >= 400) {
            String message = String.format("–ò–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ %s: —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 500 –≤–º–µ—Å—Ç–æ %d", issueId, expectedCode);
            logger.warn(" {}",message);
            Allure.addAttachment("Known issue", message + "\n\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n" + body);
            throw new SkipException(message); //–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ known issue
        } else {
            logger.error("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ {} –≤–º–µ—Å—Ç–æ {}", actual, expectedCode);
            Allure.addAttachment("Unexpected response", String.format("–û–∂–∏–¥–∞–ª—Å—è –∫–æ–¥ %d, –ø–æ–ª—É—á–µ–Ω %d\n\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n%s", expectedCode,actual,body));
            Assert.fail("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: " + actual + " –≤–º–µ—Å—Ç–æ " + expectedCode);
        }
       }

    public static boolean isPalindrome(Long id) {
        String str = String.valueOf(id);
        return str.equals(new StringBuilder(str).reverse().toString());
    }
    public static void assumeServerTime(LocalDateTime expected) {
            Response resp = given().get("/api/time"); // –ø—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞
            int code = resp.statusCode();

            if (code == 404) {
                logger.warn("‚ö†Ô∏è /api/time –Ω–µ –Ω–∞–π–¥–µ–Ω (404). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç.");
                throw new SkipException("/api/time –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä–æ–º");
            }

            if (code == 500) {
                logger.warn("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª 500 –Ω–∞ /api/time ‚Äî –∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç.");
                throw new SkipException("–ò–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–≥ –Ω–∞ /api/time");
            }

            if (code != 200) {
                throw new AssertionError("–û–∂–∏–¥–∞–ª—Å—è 200, –Ω–æ –ø–æ–ª—É—á–∏–ª–∏ " + code);
            }

            String serverTimeStr = resp.jsonPath().getString("time"); // –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª–µ "time"
            LocalDateTime serverTime = LocalDateTime.parse(serverTimeStr);

            if (!serverTime.equals(expected)) {
                throw new AssertionError("–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ " + serverTime + " –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º " + expected);
            }
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –æ–∂–∏–¥–∞–µ–º–æ–º—É –º–æ–∫-–≤—Ä–µ–º–µ–Ω–∏.
         * –ï—Å–ª–∏ endpoint /api/time –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (404), —Ç–æ —Ç–µ—Å—Ç **–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è**.
         */
        public static void assumeServerTimeOrSkip(LocalDateTime expectedTime) {
            Response response = given()
                    .basePath("/api/time")
                    .get();

            int statusCode = response.statusCode();
            String body = response.asString();

            Logger logger = LoggerFactory.getLogger(TestUtils.class);
            logger.info("üïì –û—Ç–≤–µ—Ç –æ—Ç /api/time: —Å—Ç–∞—Ç—É—Å {}, —Ç–µ–ª–æ: {}", statusCode, body);

            if (statusCode == 404) {
                logger.warn("‚ö†Ô∏è –≠–Ω–¥–ø–æ–∏–Ω—Ç /api/time –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏.");
                throw new SkipException("–≠–Ω–¥–ø–æ–∏–Ω—Ç /api/time –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω ‚Äî —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω");
            }

            try {
                String serverTimeStr = response.jsonPath().getString("serverTime");
                LocalDateTime actual = LocalDateTime.parse(serverTimeStr);
                if (!actual.equals(expectedTime)) {
                    throw new AssertionError("–û–∂–∏–¥–∞–ª–æ—Å—å –≤—Ä–µ–º—è " + expectedTime + ", –∞ –ø—Ä–∏—à–ª–æ " + actual);
                }
            } catch (Exception e) {
                logger.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {}", e.getMessage());
                throw new SkipException("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ serverTime ‚Äî —Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω");
            }
        }
    }
